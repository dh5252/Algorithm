Algorithm step:

1. 문제 이해하기 (집중하여 읽기) : 완벽하게 이해해야함.
2. 재정의와 추상화 : 자신이 다루기 쉬운 개념을 이용하여 문제의 일부를 추상화.
3. 계획 세우기 : 문제를 어떤 방식으로 해결할 지 결정하고, 사용할 알고리즘과 자료구조 선택 (문제 해결에서 가장 중요한 부분)
4. 계획 검증하기 : 설계한 알고리즘이 모든 경우에 요구 조건을 정확히 수행하는지 증명하고, 수행에 걸리는 시간과 사용하는 메모리가 문제의 제한 내에 들어가는지 확인
5. 계획 수행하기 : 프로그램 작성
6. 회고하기 : 문제를 해결한 과정을 돌이켜보고 개선하는 과정.

**문제 풀이에 실패했을때**
일정 시간이 지나도 답을 찾지 못할때에는 다른 사람의 소스코드 참조.
단, 다른 사람의 소스 코드나 풀이를 참조할 때는 반드시 복기를 동반. (내가 왜 이 풀이를 떠올리지 못했는지) 



Problem Solve Strategy:

1. 직관 : 문제와 답의 구조에 대한 직관, 떠오르지 않는다면 체계적인 접근.
2. 체계적인 접근 : a. 비슷한 문제를 풀어본 적이 있던가? : 문제풀고 동작과정과 원리 완전히 이해. 문제를 보고 최적화 문제인지, 경우의 수를 구하는 문제인지, 검색 문제인지 분류하는 방법 익히기.

			    b. 비슷한 문제를 본 적이 없다면? 단순한 방법에서 시작하기 : 일단 시간과 공간 제약을 생각하지 않고 단순한 알고리즘 만들기. 단순한 알고리즘을 변형하여 시간, 공간 제약 해결.
				
				c. 문제 푸는 과정 수식화 : 손으로 예제 입력 해결해보기.
				
				d. 문제 단순화 : 제약조건이나 다차원의 배열을 1차원으로 줄이는 둥, 문제를 쉽게 단순화 시킨 뒤 해법을 확장
				
				e. 그림으로 도식화 : 두 개의 정수 쌍을 2차원 평면좌표로 그리는 것과 같이 보기 쉽게 도식화
				
				f. 문제 수식화 : 수학적 기호로 문제 나타내보기.
				
				g. 문제 분해 : 문제의 제약 조건을 다루기 쉬운 여러 개의 제약으로 분해하기.
				
				h. 뒤에서부터 생각하기 : 정답에서부터 거꾸로 탐색
				
				i. 순서 강제하기 : 순서가 없는 문제에 순서를 강제하기. (경우의 수 문제에 유용)
				
			